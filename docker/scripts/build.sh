#!/bin/bash

# Script para construir y ejecutar la aplicaci√≥n Docker

set -e

echo "üöÄ Construyendo Dolibarr Modern Frontend con Docker..."

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar ayuda
show_help() {
    echo "Uso: $0 [OPCI√ìN]"
    echo ""
    echo "Opciones:"
    echo "  build     Construir la imagen Docker"
    echo "  up        Levantar los servicios"
    echo "  down      Detener los servicios"
    echo "  restart   Reiniciar los servicios"
    echo "  logs      Ver logs de la aplicaci√≥n"
    echo "  shell     Acceder al shell del contenedor"
    echo "  clean     Limpiar im√°genes y vol√∫menes no utilizados"
    echo "  help      Mostrar esta ayuda"
    echo ""
}

# Funci√≥n para construir la imagen
build_image() {
    echo -e "${BLUE}üì¶ Construyendo imagen Docker...${NC}"
    
    # Verificar que los archivos necesarios existen
    if [ ! -f "Dockerfile" ]; then
        echo -e "${RED}‚ùå Error: Dockerfile no encontrado${NC}"
        exit 1
    fi
    
    if [ ! -f "docker-compose.yml" ]; then
        echo -e "${RED}‚ùå Error: docker-compose.yml no encontrado${NC}"
        exit 1
    fi
    
    # Construir la imagen
    docker-compose build --no-cache
    
    echo -e "${GREEN}‚úÖ Imagen construida exitosamente${NC}"
}

# Funci√≥n para levantar servicios
start_services() {
    echo -e "${BLUE}üöÄ Levantando servicios...${NC}"
    
    # Verificar configuraci√≥n
    if [ ! -f ".env.docker" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Archivo .env.docker no encontrado, creando uno b√°sico...${NC}"
        cp .env.example .env.docker 2>/dev/null || echo "# Configurar variables de entorno" > .env.docker
    fi
    
    # Levantar servicios
    docker-compose up -d
    
    echo -e "${GREEN}‚úÖ Servicios iniciados${NC}"
    echo -e "${BLUE}üåê Aplicaci√≥n disponible en: http://localhost:8080${NC}"
    
    # Mostrar estado de los servicios
    echo -e "${BLUE}üìä Estado de los servicios:${NC}"
    docker-compose ps
}

# Funci√≥n para detener servicios
stop_services() {
    echo -e "${BLUE}üõë Deteniendo servicios...${NC}"
    docker-compose down
    echo -e "${GREEN}‚úÖ Servicios detenidos${NC}"
}

# Funci√≥n para reiniciar servicios
restart_services() {
    echo -e "${BLUE}üîÑ Reiniciando servicios...${NC}"
    docker-compose restart
    echo -e "${GREEN}‚úÖ Servicios reiniciados${NC}"
}

# Funci√≥n para ver logs
show_logs() {
    echo -e "${BLUE}üìã Mostrando logs de la aplicaci√≥n...${NC}"
    docker-compose logs -f app
}

# Funci√≥n para acceder al shell
access_shell() {
    echo -e "${BLUE}üêö Accediendo al shell del contenedor...${NC}"
    docker-compose exec app bash
}

# Funci√≥n para limpiar
clean_docker() {
    echo -e "${BLUE}üßπ Limpiando Docker...${NC}"
    
    echo -e "${YELLOW}‚ö†Ô∏è  Esto eliminar√° im√°genes y vol√∫menes no utilizados${NC}"
    read -p "¬øContinuar? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        docker system prune -f
        docker volume prune -f
        echo -e "${GREEN}‚úÖ Limpieza completada${NC}"
    else
        echo -e "${YELLOW}‚ùå Limpieza cancelada${NC}"
    fi
}

# Funci√≥n principal
main() {
    case "${1:-help}" in
        build)
            build_image
            ;;
        up)
            start_services
            ;;
        down)
            stop_services
            ;;
        restart)
            restart_services
            ;;
        logs)
            show_logs
            ;;
        shell)
            access_shell
            ;;
        clean)
            clean_docker
            ;;
        help|*)
            show_help
            ;;
    esac
}

# Verificar que Docker est√° instalado
if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Error: Docker no est√° instalado${NC}"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}‚ùå Error: Docker Compose no est√° instalado${NC}"
    exit 1
fi

# Ejecutar funci√≥n principal
main "$@"
